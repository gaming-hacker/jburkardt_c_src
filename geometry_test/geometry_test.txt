24 March 2021 04:04:49 PM

GEOMETRY_TEST
  C version
  Test geometry().

ANGLE_BOX_2D_TEST
  ANGLE_BOX_2D
  Compute P4 and P5, normal to
  line through P1 and P2, and
  line through P2 and P3,
  and DIST units from P2.

  DIST       1.000000
  P1:        0.000000        0.000000
  P2:        3.000000        0.000000
  P3:        4.000000        2.000000
  P4:        2.381966        1.000000
  P5:        3.618034       -1.000000

  DIST       1.000000
  P1:        0.000000        0.000000
  P2:        3.000000        0.000000
  P3:        2.000000       -2.000000
  P4:        3.618034       -1.000000
  P5:        2.381966        1.000000

  DIST       1.000000
  P1:        3.000000        0.000000
  P2:        3.000000        0.000000
  P3:        2.000000       -2.000000
  P4:        2.105573        0.447214
  P5:        3.894427       -0.447214

ANGLE_CONTAINS_RAY_2D_TEST
  ANGLE_CONTAINS_RAY_2D sees if a ray lies within an angle.

  Vertex A

         0:       1.000000
         1:       0.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:       1.000000
         1:       1.000000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  0
   6.12323e-17             1  0
          -0.5      0.866025  0
     -0.866025           0.5  0
            -1   1.22465e-16  0
     -0.866025          -0.5  0
          -0.5     -0.866025  0
  -1.83697e-16            -1  0
           0.5     -0.866025  0
      0.866025          -0.5  0
             1  -2.44929e-16  0

  Vertex A

         0:       1.000000
         1:       0.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:       0.000000
         1:       1.000000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  1
   6.12323e-17             1  1
          -0.5      0.866025  0
     -0.866025           0.5  0
            -1   1.22465e-16  0
     -0.866025          -0.5  0
          -0.5     -0.866025  0
  -1.83697e-16            -1  0
           0.5     -0.866025  0
      0.866025          -0.5  0
             1  -2.44929e-16  0

  Vertex A

         0:       1.000000
         1:      -1.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:       0.000000
         1:       1.000000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  1
   6.12323e-17             1  1
          -0.5      0.866025  0
     -0.866025           0.5  0
            -1   1.22465e-16  0
     -0.866025          -0.5  0
          -0.5     -0.866025  0
  -1.83697e-16            -1  0
           0.5     -0.866025  0
      0.866025          -0.5  1
             1  -2.44929e-16  1

  Vertex A

         0:       1.000000
         1:       0.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:      -1.000000
         1:       0.000000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  1
   6.12323e-17             1  1
          -0.5      0.866025  1
     -0.866025           0.5  1
            -1   1.22465e-16  1
     -0.866025          -0.5  0
          -0.5     -0.866025  0
  -1.83697e-16            -1  0
           0.5     -0.866025  0
      0.866025          -0.5  0
             1  -2.44929e-16  0

  Vertex A

         0:       1.000000
         1:       0.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:       0.000000
         1:      -1.000000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  1
   6.12323e-17             1  1
          -0.5      0.866025  1
     -0.866025           0.5  1
            -1   1.22465e-16  1
     -0.866025          -0.5  1
          -0.5     -0.866025  1
  -1.83697e-16            -1  1
           0.5     -0.866025  0
      0.866025          -0.5  0
             1  -2.44929e-16  0

  Vertex A

         0:       1.000000
         1:       0.000000

  Vertex B

         0:       0.000000
         1:       0.000000

  Vertex C

         0:       1.000000
         1:      -0.010000

       X            Y       Inside?

             1             0  1
      0.866025           0.5  1
           0.5      0.866025  1
   6.12323e-17             1  1
          -0.5      0.866025  1
     -0.866025           0.5  1
            -1   1.22465e-16  1
     -0.866025          -0.5  1
          -0.5     -0.866025  1
  -1.83697e-16            -1  1
           0.5     -0.866025  1
      0.866025          -0.5  1
             1  -2.44929e-16  0

ANGLE_DEG_2D_TEST
  ANGLE_DEG_2D computes an angle.

  X  Y  Theta  ATAN2(y, x), ANGLE_DEG_2D

     1.000     0.000     0.000     0.000     0.000
     0.866     0.500    30.000    30.000    30.000
     0.500     0.866    60.000    60.000    60.000
     0.000     1.000    90.000    90.000    90.000
    -0.500     0.866   120.000   120.000   120.000
    -0.866     0.500   150.000   150.000   150.000
    -1.000     0.000   180.000   180.000   180.000
    -0.866    -0.500   210.000  -150.000   210.000
    -0.500    -0.866   240.000  -120.000   240.000
    -0.000    -1.000   270.000   -90.000   270.000
     0.500    -0.866   300.000   -60.000   300.000
     0.866    -0.500   330.000   -30.000   330.000
     1.000    -0.000   360.000    -0.000   360.000

ANGLE_RAD_ND_TEST
  ANGLE_RAD_ND computes an angle.

  X  Y  Theta  ATAN2(y, x), ANGLE_RAD_ND

     1.000     0.000     0.000     0.000     0.000
     0.866     0.500    30.000    30.000     0.524
     0.500     0.866    60.000    60.000     1.047
     0.000     1.000    90.000    90.000     1.571
    -0.500     0.866   120.000   120.000     2.094
    -0.866     0.500   150.000   150.000     2.618
    -1.000     0.000   180.000   180.000     3.142
    -0.866    -0.500   210.000  -150.000     2.618
    -0.500    -0.866   240.000  -120.000     2.094
    -0.000    -1.000   270.000   -90.000     1.571
     0.500    -0.866   300.000   -60.000     1.047
     0.866    -0.500   330.000   -30.000     0.524
     1.000    -0.000   360.000    -0.000     0.000

BALL01_VOLUME_TEST
  BALL01_VOLUME returns the volume of the unit ball.

  Volume = 4.18879

CIRCLE_DIA2IMP_2D_TEST
  CIRCLE_DIA2IMP_2D converts a diameter to an
  implicit circle in 2D.

  P1:

         0:      -0.080734
         1:       6.546487

  P2:

         0:       4.080734
         1:      -2.546487

  The implicit circle:

  Radius = 5.000000
  Center = ( 2.000000, 2.000000 )

CIRCLE_IMP_POINT_DIST_2D_TEST
  CIRCLE_IMP_POINT_DIST_2D finds the
  distance from a point to a circle.

  The circle:

  Radius = 5.000000
  Center = ( 0.000000, 0.000000 )

       X       Y       D

  -5.631634  9.126352  9.487128
  6.590185  1.233909  4.466885
  -1.693858  -8.677625  7.291799
  -4.848444  -7.800864  7.704602
  -9.123420  2.679314  8.087986
  -8.765455  -1.009221  7.269920
  -1.973874  5.093470  2.199912
  5.945739  -9.963233  10.469853
  7.950081  -2.984953  6.863945
  -8.109105  -9.727662  11.635506

CIRCLE_LUNE_ANGLE_BY_HEIGHT_2D_TEST
  CIRCLE_LUNE_ANGLE_BY_HEIGHT_2D computes the angle of a
  circular lune based on the 'height' of the circular triangle.

      R            H        Angle

    2.000000   -2.000000    6.283185
    2.000000   -1.666667    5.111814
    2.000000   -1.333333    4.601048
    2.000000   -1.000000    4.188790
    2.000000   -0.666667    3.821266
    2.000000   -0.333333    3.476489
    2.000000    0.000000    3.141593
    2.000000    0.333333    2.806696
    2.000000    0.666667    2.461919
    2.000000    1.000000    2.094395
    2.000000    1.333333    1.682137
    2.000000    1.666667    1.171371
    2.000000    2.000000    0.000000

CIRCLE_LUNE_AREA_BY_ANGLE_2D_TEST
  CIRCLE_LUNE_AREA_BY_ANGLE_2D computes the area of a
  circular lune, defined by joining the endpoints
  of a circular arc.

      R            Theta1      Theta2        Area

  1.000000      0.000000      0.000000      0.000000
  1.000000      0.000000      0.523599      0.011799
  1.000000      0.000000      1.047198      0.090586
  1.000000      0.000000      1.570796      0.285398
  1.000000      0.000000      2.094395      0.614185
  1.000000      0.000000      2.617994      1.058997
  1.000000      0.000000      3.141593      1.570796
  1.000000      0.000000      3.665191      2.082596
  1.000000      0.000000      4.188790      2.527408
  1.000000      0.000000      4.712389      2.856194
  1.000000      0.000000      5.235988      3.051007
  1.000000      0.000000      5.759587      3.129793
  1.000000      0.000000      6.283185      3.141593

CIRCLE_LUNE_AREA_BY_HEIGHT_2D_TEST
  CIRCLE_LUNE_AREA_BY_HEIGHT_2D computes the area of a
  circular lune, defined by joining the endpoints
  of a circular arc.

      R            Height        Area

  2.000000     -2.000000     12.566371
  2.000000     -1.666667     12.066198
  2.000000     -1.333333     11.189712
  2.000000     -1.000000     10.109631
  2.000000     -0.666667      8.899612
  2.000000     -0.333333      7.610320
  2.000000      0.000000      6.283185
  2.000000      0.333333      4.956051
  2.000000      0.666667      3.666759
  2.000000      1.000000      2.456739
  2.000000      1.333333      1.376659
  2.000000      1.666667      0.500173
  2.000000      2.000000      0.000000

CIRCLE_LUNE_HEIGHT_BY_ANGLE_2D_TEST
  CIRCLE_LUNE_HEIGHT_BY_ANGLE_2D computes the height of
  the triangle of a circular lune, given the subtended angle.

      R            Angle        Height

    2.000000    0.000000    2.000000
    2.000000    0.523599    1.931852
    2.000000    1.047198    1.732051
    2.000000    1.570796    1.414214
    2.000000    2.094395    1.000000
    2.000000    2.617994    0.517638
    2.000000    3.141593    0.000000
    2.000000    3.665191   -0.517638
    2.000000    4.188790   -1.000000
    2.000000    4.712389   -1.414214
    2.000000    5.235988   -1.732051
    2.000000    5.759587   -1.931852
    2.000000    6.283185   -2.000000

CIRCLE_SECTOR_AREA_2D_TEST
  CIRCLE_SECTOR_AREA_2D computes the area of a
  circular sector, defined by joining the endpoints
  of a circular arc to the center.

      R            Theta1      Theta2        Area

  1.000000      0.000000      0.000000      0.000000
  1.000000      0.000000      0.523599      0.261799
  1.000000      0.000000      1.047198      0.523599
  1.000000      0.000000      1.570796      0.785398
  1.000000      0.000000      2.094395      1.047198
  1.000000      0.000000      2.617994      1.308997
  1.000000      0.000000      3.141593      1.570796
  1.000000      0.000000      3.665191      1.832596
  1.000000      0.000000      4.188790      2.094395
  1.000000      0.000000      4.712389      2.356194
  1.000000      0.000000      5.235988      2.617994
  1.000000      0.000000      5.759587      2.879793
  1.000000      0.000000      6.283185      3.141593

CIRCLE_TRIANGLE_AREA_2D_TEST
  CIRCLE_TRIANGLE_AREA_2D computes the signed area of a
  triangle, defined by joining the endpoints
  of a circular arc and the center.

      R            Theta1      Theta2        Area

  1.000000      0.000000      0.000000      0.000000
  1.000000      0.000000      0.523599      0.250000
  1.000000      0.000000      1.047198      0.433013
  1.000000      0.000000      1.570796      0.500000
  1.000000      0.000000      2.094395      0.433013
  1.000000      0.000000      2.617994      0.250000
  1.000000      0.000000      3.141593      0.000000
  1.000000      0.000000      3.665191     -0.250000
  1.000000      0.000000      4.188790     -0.433013
  1.000000      0.000000      4.712389     -0.500000
  1.000000      0.000000      5.235988     -0.433013
  1.000000      0.000000      5.759587     -0.250000
  1.000000      0.000000      6.283185     -0.000000

CIRCLES_INTERSECT_AREA_2D_TEST
  CIRCLES_INTERSECT_AREA_2D determines the area of the
  intersection of two circes of radius R1 and R2,
  with a distance D between the centers.

      R1      R2       D    Area

  1.000000  0.500000  1.500000  0.000000
  1.000000  0.500000  1.000000  0.350767
  1.000000  0.500000  0.500000  0.785398
  1.000000  1.000000  1.500000  0.453312
  1.000000  1.000000  1.000000  1.228370
  1.000000  1.000000  0.000000  3.141593

CIRCLES_INTERSECT_POINTS_2D_TEST
  CIRCLES_IMP_INT_2D determines the intersections of
  two circles in 2D.

  The first circle:

  Radius = 5.000000
  Center = ( 0.000000, 0.000000 )

  The second circle:

  Radius = 0.500000
  Center = ( 5.000000, 5.000000 )

  The circles do not intersect.

  The second circle:

  Radius = 5.000000
  Center = ( 7.071068, 7.071068 )

  The circles intersect at two points:

        P

  3.535329  3.535739
  3.535739  3.535329

  The second circle:

  Radius = 3.000000
  Center = ( 4.000000, 0.000000 )

  The circles intersect at two points:

        P

  4.000000  3.000000
  4.000000  -3.000000

  The second circle:

  Radius = 3.000000
  Center = ( 6.000000, 0.000000 )

  The circles intersect at two points:

        P

  4.333333  2.494438
  4.333333  -2.494438

  The second circle:

  Radius = 5.000000
  Center = ( 0.000000, 0.000000 )

  The circles coincide (infinite intersection).

CUBE01_VOLUME_TEST
  CUBE01_VOLUME returns the volume of the unit cube.

  Volume = 1

ELLIPSE_AREA1_TEST
  C version
  ELLIPSE_AREA1 computes the area of an ellipse.

  R = 10

  Matrix A in ellipse definition x*A*x=r^2

  Col:          1             2     
  Row

    1:        5.000000        1.000000
    2:        1.000000        2.000000
  Area = 104.72

ELLIPSE_AREA1_TEST
  Normal end of execution.

ELLIPSE_AREA2_TEST
  C version
  ELLIPSE_AREA2 computes the area of an ellipse.

  Ellipse: 5 * x^2 + 2 * xy + 2 * y^2 = 10
  Area = 104.72

ELLIPSE_AREA2_TEST
  Normal end of execution.

ELLIPSE_AREA3_TEST
  C version
  ELLIPSE_AREA3 computes the area of an ellipse.

  Ellipse: (x/10)^2 + (y/3.33333)^2 = 1
  Area = 104.72

ELLIPSE_AREA3_TEST
  Normal end of execution.

ellipse_eccentricity_test:
  C version
  ellipse_eccentricity computes the eccentricity of an ellipse.

      A      B      Ecc

    1.0    0.0    1.000000
    1.0    0.1    0.990000
    1.0    0.2    0.960000
    1.0    0.3    0.910000
    1.0    0.4    0.840000
    1.0    0.5    0.750000
    1.0    0.6    0.640000
    1.0    0.7    0.510000
    1.0    0.8    0.360000
    1.0    0.9    0.190000
    1.0    1.0    0.000000

ellipse_eccentricity_test
  Normal end of execution.

LINE_PAR_POINT_DIST_2D_TEST
  LINE_PAR_POINT_DIST_2D finds the distance between
  a parametric line (X0,Y0,F,G) and a point P in 2D.

  Parametric line:
  X(t) = 1 + 1 * t
  Y(t) = 3 + -1 * t

  The point P:

         0:       0.000000
         1:       0.000000
  Distance = 2.82843

  The point P:

         0:       5.000000
         1:      -1.000000
  Distance = 0

  The point P:

         0:       5.000000
         1:       3.000000
  Distance = 2.82843

LINE_PAR_POINT_NEAR_2D_TEST
  LINE_PAR_POINT_NEAR_2D finds the point on
  a parametric line (X0,Y0,F,G) nearest a point P in 2D.

  Parametric line:
  X(t) = 1 + 1 * t
  Y(t) = 3 + -1 * t

  The point P:

         0:       0.000000
         1:       0.000000

  Nearest point PN:

         0:       2.000000
         1:       2.000000
  Distance = 2.82843

  The point P:

         0:       5.000000
         1:      -1.000000

  Nearest point PN:

         0:       5.000000
         1:      -1.000000
  Distance = 0

  The point P:

         0:       5.000000
         1:       3.000000

  Nearest point PN:

         0:       3.000000
         1:       1.000000
  Distance = 2.82843

LINE_PAR_POINT_DIST_3D_TEST
  LINE_PAR_POINT_DIST_3D finds the distance
  from a parametric line to a point in 3D.

  Parametric line:
  X(t) = 1 + 3 * t
  Y(t) = 3 + -3 * t
  Z(t) = 2 + -1 * t

  The point P:

         0:       0.000000
         1:       0.000000
         2:       2.000000
  Distance = 2.84697

  The point P:

         0:       5.000000
         1:      -1.000000
         2:       1.000000
  Distance = 0.324443

  The point P:

         0:       5.000000
         1:       3.000000
         2:       3.000000
  Distance = 3.26061

LINE_PAR_POINT_NEAR_3D_TEST
  LINE_PAR_POINT_NEAR_3D finds the nearest point on
  a parametric line to a point in 3D.

  Parametric line:
  X(t) = 1 + 3 * t
  Y(t) = 3 + -3 * t
  Z(t) = 2 + -1 * t

  The point P:

         0:       0.000000
         1:       0.000000
         2:       2.000000

  Nearest point PN:

         0:       1.947368
         1:       2.052632
         2:       1.684211
  Distance = 2.84697

  The point P:

         0:       5.000000
         1:      -1.000000
         2:       1.000000

  Nearest point PN:

         0:       4.947368
         1:      -0.947368
         2:       0.684211
  Distance = 0.324443

  The point P:

         0:       5.000000
         1:       3.000000
         2:       3.000000

  Nearest point PN:

         0:       2.736842
         1:       1.263158
         2:       1.421053
  Distance = 3.26061

PARALLELOGRAM_AREA_2D_TEST
  PARALLELOGRAM_AREA_2D finds the area of a
  parallelogram in 2D.

  Vertices:

  Row:        1             2     
  Col

    1:        2.000000        7.000000
    2:        5.000000        7.000000
    3:        6.000000        9.000000
    4:        3.000000        9.000000

  AREA = 6.000000

PARALLELOGRAM_AREA_3D_TEST
  PARALLELOGRAM_AREA_3D finds the area of a
  parallelogram in 3D.

  Vertices:

  Row:        1             2             3     
  Col

    1:        1.000000        2.000000        3.000000
    2:        2.414214        3.414214        3.000000
    3:        1.707107        2.707107        4.000000
    4:        0.292893        0.292893        4.000000

  AREA = 2.000000

PLANE_NORMAL_QR_TO_XYZ_TEST
  PLANE_NORMAL_QR_TO_XYZ converts QR to XYZ coordinates
  for a normal plane, with point PP and NORMAL vector,
  and in-plane basis vectors PQ and PR,

  Maximum difference was 0.000000

PLANE_NORMAL_XYZ_TO_QR_TEST
  PLANE_NORMAL_XYZ_TO_QR converts XYZ to QR coordinates
  for a normal plane, with point PP and NORMAL vector,
  and in-plane basis vectors PQ and PR,

  Maximum difference was 0.000000

PLANE_NORMAL_TETRAHEDRON_INTERSECT_TEST
  PLANE_NORMAL_TETRAHEDRON_INTERSECT determines
  the intersection of a plane and tetrahedron.

  Plane normal vector number 1

  0.000000  0.000000  1.000000

  Point on plane:

  0.000000  0.000000  0.000000

  Number of intersection points = 3

     0  0.000000  0.000000  0.000000
     1  1.000000  0.000000  0.000000
     2  0.000000  1.000000  0.000000

  Point on plane:

  0.000000  0.000000  0.200000

  Number of intersection points = 3

     0  0.000000  0.000000  0.200000
     1  0.800000  0.000000  0.200000
     2  0.000000  0.800000  0.200000

  Point on plane:

  0.000000  0.000000  0.400000

  Number of intersection points = 3

     0  0.000000  0.000000  0.400000
     1  0.600000  0.000000  0.400000
     2  0.000000  0.600000  0.400000

  Point on plane:

  0.000000  0.000000  0.600000

  Number of intersection points = 3

     0  0.000000  0.000000  0.600000
     1  0.400000  0.000000  0.600000
     2  0.000000  0.400000  0.600000

  Point on plane:

  0.000000  0.000000  0.800000

  Number of intersection points = 3

     0  0.000000  0.000000  0.800000
     1  0.200000  0.000000  0.800000
     2  0.000000  0.200000  0.800000

  Point on plane:

  0.000000  0.000000  1.000000

  Number of intersection points = 1

     0  0.000000  0.000000  1.000000

  Point on plane:

  0.000000  0.000000  1.200000

  Number of intersection points = 0


  Plane normal vector number 2

  0.707107  0.707107  0.000000

  Point on plane:

  0.000000  0.000000  0.000000

  Number of intersection points = 2

     0  0.000000  0.000000  0.000000
     1  0.000000  0.000000  1.000000

  Point on plane:

  0.141421  0.141421  0.000000

  Number of intersection points = 4

     0  0.282843  0.000000  0.000000
     1  0.000000  0.282843  0.000000
     2  0.282843  0.000000  0.717157
     3  0.000000  0.000000  0.000000

  Point on plane:

  0.282843  0.282843  0.000000

  Number of intersection points = 4

     0  0.394394  0.171291  0.434315
     1  0.000000  0.565685  0.434315
     2  0.565685  0.000000  0.434315
     3  0.000000  0.282843  0.717157

  Point on plane:

  0.424264  0.424264  0.000000

  Number of intersection points = 4

     0  0.651239  0.197289  0.151472
     1  0.000000  0.848528  0.151472
     2  0.848528  0.000000  0.151472
     3  0.000000  0.565685  0.434315

  Point on plane:

  0.565685  0.565685  0.000000

  Number of intersection points = 0


  Point on plane:

  0.707107  0.707107  0.000000

  Number of intersection points = 0


  Point on plane:

  0.848528  0.848528  0.000000

  Number of intersection points = 0


polygon_contains_point_2d_test
  polygon_contains_point_2d determines if 
  a point is in a polygon.

  The polygon vertices:

  Row:        1             2     
  Col

    1:        0.000000        0.000000
    2:        5.000000        0.000000
    3:        5.000000        4.000000
    4:        2.000000        4.000000
    5:        2.000000        2.000000
    6:        3.000000        2.000000
    7:        3.000000        3.000000
    8:        4.000000        3.000000
    9:        4.000000        1.000000
   10:        1.000000        1.000000
   11:        1.000000        5.000000
   12:        6.000000        5.000000
   13:        6.000000        6.000000
   14:        0.000000        6.000000

          P               Inside?

           0.5           5.5  1
           1.5           4.5  0
           2.5           3.5  1
           3.5           2.5  0
           4.5           1.5  1
           5.5           0.5  0

polygon_contains_point_2d_convex_test
  polygon_contains_point_2d_convex() determines if 
  a point is inside a convex polygon.

  The polygon vertices:

  Row:        1             2     
  Col

    1:        0.000000        0.000000
    2:        1.000000        0.000000
    3:        2.000000        1.000000
    4:        1.000000        2.000000
    5:        0.000000        2.000000

          P          Inside?

             1             1  1
             3             4  0
             0             2  1
           0.5         -0.25  0

POLYGON_CONTAINS_POINT_2D_3_TEST
  POLYGON_CONTAINS_POINT_2D_3 determines if 
  a point is in a polygon.

  The polygon vertices:

  Row:        1             2     
  Col

    1:        0.000000        0.000000
    2:        1.000000        0.000000
    3:        2.000000        1.000000
    4:        1.000000        2.000000
    5:        0.000000        2.000000

          P          Inside

             1             1  1
             3             4  0
             0             2  1
           0.5         -0.25  0

QUAD_AREA_2D_TEST
  QUAD_AREA_2D finds the area of a quadrilateral;

  The vertices:

  Row:        1             2     
  Col

    1:        0.000000        0.000000
    2:        1.000000        0.000000
    3:        1.000000        1.000000
    4:        0.000000        1.000000

  QUAD_AREA_2D area is  1.000000

QUAD_AREA2_2D_TEST
  QUAD_AREA2_2D finds the area of a quadrilateral.

  The vertices:

  Row:        1             2     
  Col

    1:        0.000000        0.000000
    2:        1.000000        0.000000
    3:        1.000000        1.000000
    4:        0.000000        1.000000

  QUAD_AREA2_2D area is 1.000000

QUAD_AREA_3D_TEST
  For a quadrilateral in 3D:
  QUAD_AREA_3D finds the area.

  The vertices:

  Row:        1             2             3     
  Col

    1:        2.000000        2.000000        0.000000
    2:        0.000000        0.000000        0.000000
    3:        1.000000        1.000000        1.000000
    4:        3.000000        3.000000        1.000000

  QUAD_AREA_3D area is     2.828427
  Sum of TRIANGLE_AREA_3D: 2.828427

SPHERE_EXP2IMP_3D_TEST
  SPHERE_EXP2IMP_3D: explicit sphere => implicit form;

  Initial form of explicit sphere:

  P1:      4.000000      2.000000      3.000000
  P2:      1.000000      5.000000      3.000000
  P3:      1.000000      2.000000      6.000000
  P4:     -2.000000      2.000000      3.000000

  Computed form of implicit sphere:

  Imputed radius = 3.000000

  Imputed center:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Computed form of explicit sphere:

  P1:      1.000000      2.000000      6.000000
  P2:      3.598076      2.000000      1.500000
  P3:     -0.299038      4.250000      1.500000
  P4:     -0.299038     -0.250000      1.500000

SPHERE_IMP2EXP_3D_TEST
  SPHERE_IMP2EXP_3D: implicit sphere => explicit form.

  Initial form of explicit sphere:

  P1:      4.000000      2.000000      3.000000
  P2:      1.000000      5.000000      3.000000
  P3:      1.000000      2.000000      6.000000
  P4:     -2.000000      2.000000      3.000000

  Computed form of implicit sphere:

  Imputed radius = 3.000000

  Imputed center:

         0:       1.000000
         1:       2.000000
         2:       3.000000

  Computed form of explicit sphere:

  P1:      1.000000      2.000000      6.000000
  P2:      3.598076      2.000000      1.500000
  P3:     -0.299038      4.250000      1.500000
  P4:     -0.299038     -0.250000      1.500000

SPHERE_EXP2IMP_ND_TEST
  SPHERE_EXP2IMP_ND: explicit sphere => implicit form;

  Initial form of explicit sphere:

  Row:        1             2             3     
  Col

    1:        4.000000        2.000000        3.000000
    2:        1.000000        5.000000        3.000000
    3:        1.000000        2.000000        6.000000
    4:       -2.000000        2.000000        3.000000

  Computed form of implicit sphere:

  Imputed radius = 3.000000
  True radius =    3.000000

  Imputed center

         0:       1.000000
         1:       2.000000
         2:       3.000000

  True center

         0:       1.000000
         1:       2.000000
         2:       3.000000

TRIANGLE_CIRCUMCENTER_2D_TEST
  TRIANGLE_CIRCUMCENTER_2D computes the circumcenter of a triangle;

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.000000        6.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D:

         0:      10.500000
         1:       5.500000

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.500000        5.866025

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D:

         0:      10.500000
         1:       5.288675

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.500000       15.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D:

         0:      10.500000
         1:       9.987500

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       20.000000        7.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D:

         0:      10.500000
         1:      28.500000

TRIANGLE_CIRCUMCENTER_2D_2_TEST
  TRIANGLE_CIRCUMCENTER_2D_2 computes the circumcenter of a triangle;

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.000000        6.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D_2:

         0:      10.500000
         1:       5.500000

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.500000        5.866025

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D_2:

         0:      10.500000
         1:       5.288675

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       10.500000       15.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D_2:

         0:      10.500000
         1:       9.987500

  Triangle vertices:

  Row:        1             2     
  Col

    1:       10.000000        5.000000
    2:       11.000000        5.000000
    3:       20.000000        7.000000

  Circumcenter by TRIANGLE_CIRCUMCENTER_2D_2:

         0:      10.500000
         1:      28.500000

TRIANGLE_CIRCUMCENTER_TEST
  For a triangle in M dimensions, the circumenter can be computed by:
  TRIANGLE_CIRCUMCENTER;

  M2 = 2

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       6.901910
         1:      12.913314

  Distances from circumcenter to vertices:

  0.533001
  0.533001
  0.533001

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       7.120177
         1:      12.863463

  Distances from circumcenter to vertices:

  0.653938
  0.653938
  0.653938

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:      13.837365
         1:      11.329290

  Distances from circumcenter to vertices:

  7.339086
  7.339086
  7.339086

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:      48.737251
         1:       3.358325

  Distances from circumcenter to vertices:

  43.124048
  43.124048
  43.124048

  M2 = 3

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       5.129152
         1:      12.718640
         2:       9.079022

  Distances from circumcenter to vertices:

  0.599947
  0.599947
  0.599947

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       5.117689
         1:      12.716698
         2:       9.084280

  Distances from circumcenter to vertices:

  0.600303
  0.600303
  0.600303

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       9.168227
         1:      13.403043
         2:       7.226464

  Distances from circumcenter to vertices:

  4.525605
  4.525605
  4.525605

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:      76.298618
         1:      24.777977
         2:     -23.563495

  Distances from circumcenter to vertices:

  79.213443
  79.213443
  79.213443

  M2 = 4

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       3.843413
         1:      10.880094
         2:      10.148894
         3:       7.129777

  Distances from circumcenter to vertices:

  1.037277
  1.037277
  1.037277

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       4.080267
         1:      10.925792
         2:      10.301810
         3:       7.196854

  Distances from circumcenter to vertices:

  0.758041
  0.758041
  0.758041

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       7.250969
         1:       9.694480
         2:      10.960800
         3:       7.087093

  Distances from circumcenter to vertices:

  3.158838
  3.158838
  3.158838

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:     114.310906
         1:     -31.881223
         2:      33.211845
         3:       3.380955

  Distances from circumcenter to vertices:

  120.135036
  120.135036
  120.135036

  M2 = 5

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       2.961642
         1:      11.849925
         2:      10.012935
         3:       6.131911
         4:       7.594984

  Distances from circumcenter to vertices:

  1.304893
  1.304893
  1.304893

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       3.018347
         1:      12.062091
         2:      10.068589
         3:       6.134945
         4:       8.277846

  Distances from circumcenter to vertices:

  0.701475
  0.701475
  0.701475

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       3.024685
         1:      11.822808
         2:       8.911660
         3:       5.095279
         4:      12.542414

  Distances from circumcenter to vertices:

  4.452400
  4.452400
  4.452400

  Circumcenter by TRIANGLE_CIRCUMCENTER:

         0:       3.158069
         1:       6.787267
         2:     -15.435129
         3:     -16.783780
         4:     102.287325

  Distances from circumcenter to vertices:

  100.062354
  100.062354
  100.062354

WEDGE01_VOLUME_TEST
  WEDGE01_VOLUME returns the volume of the unit wedge.

  Volume = 1

GEOMETRY_TEST
  Normal end of execution.

24 March 2021 04:04:49 PM
