19 January 2020 09:01:38 AM

C8LIB_PRB
  C version
  Test the C8LIB library.

C8_ABS_TEST
  C8_ABS computes the absolute value of a C8.

       C1=C8_UNIFORM_01          R2=C8_ABS(C1)       R3=CABS(C1)
     ---------------------     ---------------     ---------------

      0.449860,   -0.126667          0.467352          0.467352
     -0.843197,   -0.344280          0.910774          0.910774
      0.589627,    0.260090          0.644443          0.644443
      0.391140,    0.323400          0.507521          0.507521
     -0.139466,   -0.156136          0.209354          0.209354
     -0.236066,    0.077459          0.248450          0.248450
      0.018599,   -0.633214          0.633487          0.633487
      0.892850,    0.010314          0.892909          0.892909
     -0.560465,    0.763795          0.947367          0.947367
      0.306357,    0.026275          0.307481          0.307481

C8_ACOS_TEST
  C8_ACOS computes the inverse cosine;

       C1=C8_UNIFORM_01          C2 = C8_ACOS(C1)           C3 = C8_COS(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      1.109149,    0.141009      0.449860,   -0.126667
     -0.843197,   -0.344280     -2.416418,   -0.498201     -0.843197,   -0.344280
      0.589627,    0.260090     -0.973443,    0.309595      0.589627,    0.260090
      0.391140,    0.323400     -1.192424,    0.341349      0.391140,    0.323400
     -0.139466,   -0.156136     -1.709000,   -0.156993     -0.139466,   -0.156136
     -0.236066,    0.077459     -4.474841,   -0.079613     -0.236066,    0.077459
      0.018599,   -0.633214      1.555082,    0.597163      0.018599,   -0.633214
      0.892850,    0.010314     -0.467681,    0.022876      0.892850,    0.010314
     -0.560465,    0.763795     -4.270038,   -0.767531     -0.560465,    0.763795
      0.306357,    0.026275     -1.259556,    0.027598      0.306357,    0.026275

C8_ACOSH_TEST
  C8_ACOSH computes the inverse hyperbolic cosine;

       C1=C8_UNIFORM_01          C2 = C8_ACOSH(C1)          C3 = C8_COSH(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.141009,    1.109149      0.449860,   -0.126667
     -0.843197,   -0.344280      0.498201,   -2.416418     -0.843197,   -0.344280
      0.589627,    0.260090     -0.309595,   -0.973443      0.589627,    0.260090
      0.391140,    0.323400     -0.341349,   -1.192424      0.391140,    0.323400
     -0.139466,   -0.156136      0.156993,   -1.709000     -0.139466,   -0.156136
     -0.236066,    0.077459      0.079613,   -4.474841     -0.236066,    0.077459
      0.018599,   -0.633214     -0.597163,    1.555082      0.018599,   -0.633214
      0.892850,    0.010314     -0.022876,   -0.467681      0.892850,    0.010314
     -0.560465,    0.763795      0.767531,   -4.270038     -0.560465,    0.763795
      0.306357,    0.026275     -0.027598,   -1.259556      0.306357,    0.026275

C8_ADD_TEST
  C8_ADD computes C3 = C1 + C2.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3 = C8_ADD(C1,C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280     -0.393337,   -0.470947
      0.589627,    0.260090      0.391140,    0.323400      0.980767,    0.583490
     -0.139466,   -0.156136     -0.236066,    0.077459     -0.375532,   -0.078676
      0.018599,   -0.633214      0.892850,    0.010314      0.911449,   -0.622901
     -0.560465,    0.763795      0.306357,    0.026275     -0.254108,    0.790070
      0.500804,   -0.779931      0.350471,    0.016555      0.851275,   -0.763376
      0.434989,   -0.266623     -0.200947,    0.270711      0.234042,    0.004088
     -0.097460,    0.901881     -0.770245,   -0.314307     -0.867705,    0.587573
     -0.889181,    0.265655     -0.779871,   -0.551160     -1.669053,   -0.285505
      0.031360,   -0.433556      0.249089,    0.578743      0.280450,    0.145186

C8_ARG_TEST
  C8_ARG computes the argument of a C8 value.

       C1=C8_UNIFORM_01          R2=C8_ARG(C1)
     ---------------------     ---------------------

      0.449860,   -0.126667      6.008721
     -0.843197,   -0.344280      3.529237
      0.589627,    0.260090      0.415436
      0.391140,    0.323400      0.690879
     -0.139466,   -0.156136      3.983324
     -0.236066,    0.077459      2.824537
      0.018599,   -0.633214      4.741753
      0.892850,    0.010314      0.011551
     -0.560465,    0.763795      2.203842
      0.306357,    0.026275      0.085557

C8_ASIN_TEST
  C8_ASIN computes the inverse sine;

       C1=C8_UNIFORM_01          C2 = C8_ASIN(C1)           C3 = C8_SIN(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.461648,   -0.141009      0.449860,   -0.126667
     -0.843197,   -0.344280      3.987214,    0.498201     -0.843197,   -0.344280
      0.589627,    0.260090      2.544240,   -0.309595      0.589627,    0.260090
      0.391140,    0.323400      2.763220,   -0.341349      0.391140,    0.323400
     -0.139466,   -0.156136      3.279797,    0.156993     -0.139466,   -0.156136
     -0.236066,    0.077459      6.045637,    0.079613     -0.236066,    0.077459
      0.018599,   -0.633214      0.015714,   -0.597163      0.018599,   -0.633214
      0.892850,    0.010314      2.038477,   -0.022876      0.892850,    0.010314
     -0.560465,    0.763795      5.840835,    0.767531     -0.560465,    0.763795
      0.306357,    0.026275      2.830352,   -0.027598      0.306357,    0.026275

C8_ASINH_TEST
  C8_ASINH computes the inverse hyperbolic sine;

       C1=C8_UNIFORM_01          C2 = C8_ASINH(C1)          C3 = C8_SINH(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.438679,   -3.025949      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.788715,   -0.262344     -0.843197,   -0.344280
      0.589627,    0.260090      0.572932,   -6.058753      0.589627,    0.260090
      0.391140,    0.323400      0.399232,   -5.979295      0.391140,    0.323400
     -0.139466,   -0.156136     -0.140698,   -0.155225     -0.139466,   -0.156136
     -0.236066,    0.077459      0.234582,   -3.217040     -0.236066,    0.077459
      0.018599,   -0.633214     -0.024024,   -2.456130      0.018599,   -0.633214
      0.892850,    0.010314      0.803562,   -6.275492      0.892850,    0.010314
     -0.560465,    0.763795      0.665100,   -3.811927     -0.560465,    0.763795
      0.306357,    0.026275      0.301849,   -6.258061      0.306357,    0.026275

C8_ATAN_TEST
  C8_ATAN computes the inverse tangent;

       C1=C8_UNIFORM_01          C2 = C8_ATAN(C1)          C3 = C8_TAN(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -2.713818,   -0.105499      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.735020,   -0.197908     -0.843197,   -0.344280
      0.589627,    0.260090     -2.586342,    0.192787      0.589627,    0.260090
      0.391140,    0.323400     -2.735826,    0.284294      0.391140,    0.323400
     -0.139466,   -0.156136     -0.141920,   -0.154298     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.233099,    0.073480     -0.236066,    0.077459
      0.018599,   -0.633214     -3.110566,   -0.746154      0.018599,   -0.633214
      0.892850,    0.010314     -2.412713,    0.005739      0.892850,    0.010314
     -0.560465,    0.763795     -0.739806,    0.556404     -0.560465,    0.763795
      0.306357,    0.026275     -2.844138,    0.024024      0.306357,    0.026275

C8_ATANH_TEST
  C8_ATANH computes the inverse hyperbolic tangent;

       C1=C8_UNIFORM_01          C2 = C8_ATANH(C1)         C3 = C8_TANH(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.473511,    2.984870      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.800349,    2.477556     -0.843197,   -0.344280
      0.589627,    0.260090      0.599279,    0.363538      0.589627,    0.260090
      0.391140,    0.323400      0.364173,    0.358338      0.391140,    0.323400
     -0.139466,   -0.156136     -0.136934,    2.983760     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.239027,    0.081817     -0.236066,    0.077459
      0.018599,   -0.633214      0.013276,    2.576997      0.018599,   -0.633214
      0.892850,    0.010314      1.433505,    0.050703      0.892850,    0.010314
     -0.560465,    0.763795     -0.339400,    0.751900     -0.560465,    0.763795
      0.306357,    0.026275      0.316262,    0.028986      0.306357,    0.026275

C8_CONJ_TEST
  C8_CONJ computes C2 = conj ( C1 ).

       C1=C8_UNIFORM_01          C2=C8_CONJ(C1)            C3=C8_CONJ(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.449860,    0.126667      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.843197,    0.344280     -0.843197,   -0.344280
      0.589627,    0.260090      0.589627,   -0.260090      0.589627,    0.260090
      0.391140,    0.323400      0.391140,   -0.323400      0.391140,    0.323400
     -0.139466,   -0.156136     -0.139466,    0.156136     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.236066,   -0.077459     -0.236066,    0.077459
      0.018599,   -0.633214      0.018599,    0.633214      0.018599,   -0.633214
      0.892850,    0.010314      0.892850,   -0.010314      0.892850,    0.010314
     -0.560465,    0.763795     -0.560465,   -0.763795     -0.560465,    0.763795
      0.306357,    0.026275      0.306357,   -0.026275      0.306357,    0.026275

C8_COS_TEST
  C8_COS computes the cosine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_COS(C1)           C3 = C8_ACOS(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.907742,    0.055227     -0.449860,    0.126667
     -0.843197,   -0.344280      0.704885,   -0.262208      0.843197,    0.344280
      0.589627,    0.260090      0.859419,   -0.146260      0.589627,    0.260090
      0.391140,    0.323400      0.973242,   -0.125454      0.391140,    0.323400
     -0.139466,   -0.156136      1.002386,   -0.021793      0.139466,    0.156136
     -0.236066,    0.077459      0.975184,    0.018134     -0.236066,    0.077459
      0.018599,   -0.633214      1.207060,    0.012580     -0.018599,    0.633214
      0.892850,    0.010314      0.627228,   -0.008033      0.892850,    0.010314
     -0.560465,    0.763795      1.106320,    0.446663     -0.560465,    0.763795
      0.306357,    0.026275      0.953768,   -0.007925      0.306357,    0.026275

C8_COSH_TEST
  C8_COSH computes the hyperbolic cosine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_COSH(C1)          C3 = C8_ACOSH(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      1.094069,   -0.058767     -0.449860,    0.126667
     -0.843197,   -0.344280      1.296250,    0.319538     -0.843197,   -0.344280
      0.589627,    0.260090      1.139274,    0.160573     -0.589627,   -0.260090
      0.391140,    0.323400      1.021619,    0.127495     -0.391140,   -0.323400
     -0.139466,   -0.156136      0.997458,    0.021758     -0.139466,   -0.156136
     -0.236066,    0.077459      1.024911,   -0.018437     -0.236066,    0.077459
      0.018599,   -0.633214      0.806269,   -0.011007     -0.018599,    0.633214
      0.892850,    0.010314      1.425707,    0.010481     -0.892850,   -0.010314
     -0.560465,    0.763795      0.838648,   -0.408272     -0.560465,    0.763795
      0.306357,    0.026275      1.046934,    0.008175     -0.306357,   -0.026275

C8_CUBE_ROOT_TEST
  C8_CUBE_ROOT computes C2 = cube root ( C1 ).
  Check by C3 = C2 * C2.

        C1=C8_UNIFORM_01          C2=C8_CUBE_ROOT(C1)      C3=C2*C2*C2
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.324994,    0.704705      0.449860,   -0.126667
     -0.843197,   -0.344280      0.372454,    0.894915     -0.843197,   -0.344280
      0.589627,    0.260090      0.855495,    0.119231      0.589627,    0.260090
      0.391140,    0.323400      0.776602,    0.182076      0.391140,    0.323400
     -0.139466,   -0.156136      0.142886,    0.576334     -0.139466,   -0.156136
     -0.236066,    0.077459      0.370005,    0.508236     -0.236066,    0.077459
      0.018599,   -0.633214     -0.008406,    0.858800      0.018599,   -0.633214
      0.892850,    0.010314      0.962940,    0.003708      0.892850,    0.010314
     -0.560465,    0.763795      0.728835,    0.658328     -0.560465,    0.763795
      0.306357,    0.026275      0.674678,    0.019246      0.306357,    0.026275

C8_DIV_TEST
  C8_DIV computes C3 = C1 / C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01         C3=C8_DIV(C1,C2)           C4 = C1 / C2
     ---------------------     ---------------------     ---------------------    ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280     -0.404710,    0.315467     -0.404710,    0.315467
      0.589627,    0.260090      0.391140,    0.323400      1.221921,   -0.345347      1.221921,   -0.345347
     -0.139466,   -0.156136     -0.236066,    0.077459      0.337436,    0.772127      0.337436,    0.772127
      0.018599,   -0.633214      0.892850,    0.010314      0.012637,   -0.709352      0.012637,   -0.709352
     -0.560465,    0.763795      0.306357,    0.026275     -1.603825,    2.630712     -1.603825,    2.630712
      0.500804,   -0.779931      0.350471,    0.016555      1.320880,   -2.287773      1.320880,   -2.287773
      0.434989,   -0.266623     -0.200947,    0.270711     -1.404027,   -0.564638     -1.404027,   -0.564638
     -0.097460,    0.901881     -0.770245,   -0.314307     -0.301127,   -1.048023     -0.301127,   -1.048023
     -0.889181,    0.265655     -0.779871,   -0.551160      0.599827,   -0.764557      0.599827,   -0.764557
      0.031360,   -0.433556      0.249089,    0.578743     -0.612376,   -0.317752     -0.612376,   -0.317752

C8_DIV_R8_TEST
  C8_DIV_R8 computes C3 = C1 / R2.

        C1=C8_UNIFORM_01          R2=R8_UNIFORM_01         C3=C8_DIV_R8(C1,R2)           C4 = C1 / R2
     ---------------------     ---------------------     ---------------------    ---------------------

      0.449860,   -0.126667      0.829509                  0.542320,   -0.152702      0.542320,   -0.152702
     -0.645830,    0.380263      0.066119                 -9.767724,    5.751207     -9.767724,    5.751207
      0.391140,    0.323400      0.043829                  8.924220,    7.378677      8.924220,    7.378677
      0.737082,    0.301125      0.449539                  1.639639,    0.669852      1.639639,    0.669852
      0.018599,   -0.633214      0.797287                  0.023328,   -0.794211      0.023328,   -0.794211
      0.034288,   -0.025743      0.350752                  0.097756,   -0.073393      0.097756,   -0.073393
      0.306357,    0.026275      0.859097                  0.356603,    0.030585      0.356603,    0.030585
      0.656079,    0.640630      0.007512                 87.333280,   85.276801     87.333280,   85.276801
      0.434989,   -0.266623      0.113664                  3.826970,   -2.345709      3.826970,   -2.345709
      0.262172,   -0.531879      0.267132                  0.981430,   -1.991068      0.981430,   -1.991068

C8_EXP_TEST
  C8_EXP computes C2 = e ^ C1.

        C1=C8_UNIFORM_01          C2=C8_EXP(C1)            C3=C8_LOG(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      1.555529,   -0.198095      0.449860,    6.156518
     -0.843197,   -0.344280      0.405080,   -0.145245     -0.843197,    5.938905
      0.589627,    0.260090      1.742665,    0.463755      0.589627,    0.260090
      0.391140,    0.323400      1.402012,    0.469908      0.391140,    0.323400
     -0.139466,   -0.156136      0.859242,   -0.135259     -0.139466,    6.127050
     -0.236066,    0.077459      0.787360,    0.061111     -0.236066,    0.077459
      0.018599,   -0.633214      0.821263,   -0.602848      0.018599,    5.649971
      0.892850,    0.010314      2.441949,    0.025186      0.892850,    0.010314
     -0.560465,    0.763795      0.412345,    0.394903     -0.560465,    0.763795
      0.306357,    0.026275      1.357998,    0.035690      0.306357,    0.026275

C8_I_TEST
  C8_I returns the imaginary unit as a C8.

  C1 = C8_I ( ) =   ( 0, 1 )
  C2 = C1 * C1 =   ( -1, 0 )

C8_IMAG_TEST
  C8_IMAG computes the imaginary part of a C8.

       C1=C8_UNIFORM_01          R2=C8_IMAG(C1)    R3=CIMAG(C1)
     ---------------------     ---------------   ---------------

      0.449860,   -0.126667       -0.126667       -0.126667
     -0.843197,   -0.344280       -0.344280       -0.344280
      0.589627,    0.260090        0.260090        0.260090
      0.391140,    0.323400        0.323400        0.323400
     -0.139466,   -0.156136       -0.156136       -0.156136
     -0.236066,    0.077459        0.077459        0.077459
      0.018599,   -0.633214       -0.633214       -0.633214
      0.892850,    0.010314        0.010314        0.010314
     -0.560465,    0.763795        0.763795        0.763795
      0.306357,    0.026275        0.026275        0.026275

C8_INV_TEST
  C8_INV computes C2 = 1 / C1.
  Check by C3 = 1 / C2.

        C1=C8_UNIFORM_01          C2=C8_INV(C1)             C3=C8_INV(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      2.059624,    0.579930      0.449860,   -0.126667
     -0.843197,   -0.344280     -1.016501,    0.415041     -0.843197,   -0.344280
      0.589627,    0.260090      1.419738,   -0.626260      0.589627,    0.260090
      0.391140,    0.323400      1.518530,   -1.255543      0.391140,    0.323400
     -0.139466,   -0.156136     -3.182042,    3.562380     -0.139466,   -0.156136
     -0.236066,    0.077459     -3.824346,   -1.254865     -0.236066,    0.077459
      0.018599,   -0.633214      0.046347,    1.577883      0.018599,   -0.633214
      0.892850,    0.010314      1.119860,   -0.012936      0.892850,    0.010314
     -0.560465,    0.763795     -0.624471,   -0.851021     -0.560465,    0.763795
      0.306357,    0.026275      3.240334,   -0.277913      0.306357,    0.026275

C8_LE_L1_TEST
  C8_LE_L1 evalues (C1 <= C2) using the L1 norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_L1(C1,C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280        1
      0.589627,    0.260090      0.391140,    0.323400        0
     -0.139466,   -0.156136     -0.236066,    0.077459        1
      0.018599,   -0.633214      0.892850,    0.010314        1
     -0.560465,    0.763795      0.306357,    0.026275        0
      0.500804,   -0.779931      0.350471,    0.016555        0
      0.434989,   -0.266623     -0.200947,    0.270711        0
     -0.097460,    0.901881     -0.770245,   -0.314307        1
     -0.889181,    0.265655     -0.779871,   -0.551160        1
      0.031360,   -0.433556      0.249089,    0.578743        1

C8_LE_L2_TEST
  C8_LE_L2 evalues (C1 <= C2) using the L2 norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_L2(C1,C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280        1
      0.589627,    0.260090      0.391140,    0.323400        0
     -0.139466,   -0.156136     -0.236066,    0.077459        1
      0.018599,   -0.633214      0.892850,    0.010314        1
     -0.560465,    0.763795      0.306357,    0.026275        0
      0.500804,   -0.779931      0.350471,    0.016555        0
      0.434989,   -0.266623     -0.200947,    0.270711        0
     -0.097460,    0.901881     -0.770245,   -0.314307        0
     -0.889181,    0.265655     -0.779871,   -0.551160        1
      0.031360,   -0.433556      0.249089,    0.578743        1

C8_LE_LI_TEST
  C8_LE_LI evalues (C1 <= C2) using the Loo norm.

       C1=C8_UNIFORM_01()      C2 = C8_UNIFORM_01()      L3 = C8_LE_LI(C1,C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280        1
      0.589627,    0.260090      0.391140,    0.323400        0
     -0.139466,   -0.156136     -0.236066,    0.077459        1
      0.018599,   -0.633214      0.892850,    0.010314        1
     -0.560465,    0.763795      0.306357,    0.026275        0
      0.500804,   -0.779931      0.350471,    0.016555        0
      0.434989,   -0.266623     -0.200947,    0.270711        0
     -0.097460,    0.901881     -0.770245,   -0.314307        0
     -0.889181,    0.265655     -0.779871,   -0.551160        0
      0.031360,   -0.433556      0.249089,    0.578743        1

C8_LOG_TEST
  C8_LOG computes log ( Z ).

        C1=C8_UNIFORM_01          C2=C8_LOG(C1)             C3=C8_EXP(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.760672,    6.008721      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.093461,    3.529237     -0.843197,   -0.344280
      0.589627,    0.260090     -0.439369,    0.415436      0.589627,    0.260090
      0.391140,    0.323400     -0.678217,    0.690879      0.391140,    0.323400
     -0.139466,   -0.156136     -1.563730,    3.983324     -0.139466,   -0.156136
     -0.236066,    0.077459     -1.392515,    2.824537     -0.236066,    0.077459
      0.018599,   -0.633214     -0.456515,    4.741753      0.018599,   -0.633214
      0.892850,    0.010314     -0.113270,    0.011551      0.892850,    0.010314
     -0.560465,    0.763795     -0.054069,    2.203842     -0.560465,    0.763795
      0.306357,    0.026275     -1.179341,    0.085557      0.306357,    0.026275

C8_MAG_TEST
  C8_MAG computes the magnitude of a C8.

       C1=C8_UNIFORM_01          R2=C8_MAG(C1)
     ---------------------     ---------------------

      0.449860,   -0.126667      0.467352
     -0.843197,   -0.344280      0.910774
      0.589627,    0.260090      0.644443
      0.391140,    0.323400      0.507521
     -0.139466,   -0.156136      0.209354
     -0.236066,    0.077459      0.248450
      0.018599,   -0.633214      0.633487
      0.892850,    0.010314      0.892909
     -0.560465,    0.763795      0.947367
      0.306357,    0.026275      0.307481

C8_MUL_TEST
  C8_MUL computes C3 = C1 * C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3=C8_MUL(C1,C2)          C4=C1*C2
     ---------------------     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280     -0.422929,   -0.048072     -0.422929,   -0.048072
      0.589627,    0.260090      0.391140,    0.323400      0.146513,    0.292417      0.146513,    0.292417
     -0.139466,   -0.156136     -0.236066,    0.077459      0.045017,    0.026055      0.045017,    0.026055
      0.018599,   -0.633214      0.892850,    0.010314      0.023137,   -0.565173      0.023137,   -0.565173
     -0.560465,    0.763795      0.306357,    0.026275     -0.191771,    0.219267     -0.191771,    0.219267
      0.500804,   -0.779931      0.350471,    0.016555      0.188429,   -0.265052      0.188429,   -0.265052
      0.434989,   -0.266623     -0.200947,    0.270711     -0.015232,    0.171333     -0.015232,    0.171333
     -0.097460,    0.901881     -0.770245,   -0.314307      0.358536,   -0.664037      0.358536,   -0.664037
     -0.889181,    0.265655     -0.779871,   -0.551160      0.839866,    0.282904      0.839866,    0.282904
      0.031360,   -0.433556      0.249089,    0.578743      0.258729,   -0.089845      0.258729,   -0.089845

C8_NINT_TEST
  C8_NINT computes the nearest integer to a C8.

       C1=10*C8_UNIFORM_01     C2=C8_NINT(C1)
     ---------------------     ---------------

      4.498596,   -1.266674          4.000000,   -1.000000
     -8.431966,   -3.442800         -8.000000,   -3.000000
      5.896271,    2.600903          6.000000,    3.000000
      3.911396,    3.234000          4.000000,    3.000000
     -1.394657,   -1.561355         -1.000000,   -2.000000
     -2.360663,    0.774593         -2.000000,    1.000000
      0.185993,   -6.332143          0.000000,   -6.000000
      8.928497,    0.103136          9.000000,    0.000000
     -5.604651,    7.637951         -6.000000,    8.000000
      3.063566,    0.262752          3.000000,    0.000000

C8_NORM_L1_TEST
  C8_NORM_L1 computes the L1 norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_L1(C1)
     ---------------------     -----------------

      0.449860,   -0.126667          0.576527
     -0.843197,   -0.344280          1.187477
      0.589627,    0.260090          0.849717
      0.391140,    0.323400          0.714540
     -0.139466,   -0.156136          0.295601
     -0.236066,    0.077459          0.313526
      0.018599,   -0.633214          0.651814
      0.892850,    0.010314          0.903163
     -0.560465,    0.763795          1.324260
      0.306357,    0.026275          0.332632

C8_NORM_L2_TEST
  C8_NORM_L2 computes the L2 norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_L2(C1)
     ---------------------     -----------------

      0.449860,   -0.126667          0.467352
     -0.843197,   -0.344280          0.910774
      0.589627,    0.260090          0.644443
      0.391140,    0.323400          0.507521
     -0.139466,   -0.156136          0.209354
     -0.236066,    0.077459          0.248450
      0.018599,   -0.633214          0.633487
      0.892850,    0.010314          0.892909
     -0.560465,    0.763795          0.947367
      0.306357,    0.026275          0.307481

C8_NORM_LI_TEST
  C8_NORM_LI computes the Loo norm of a C8.

       C1=C8_UNIFORM_01        R2=C8_NORM_LI(C1)
     ---------------------     -----------------

      0.449860,   -0.126667          0.449860
     -0.843197,   -0.344280          0.843197
      0.589627,    0.260090          0.589627
      0.391140,    0.323400          0.391140
     -0.139466,   -0.156136          0.156136
     -0.236066,    0.077459          0.236066
      0.018599,   -0.633214          0.633214
      0.892850,    0.010314          0.892850
     -0.560465,    0.763795          0.763795
      0.306357,    0.026275          0.306357

C8_NORMAL_01_TEST
  C8_NORMAL_01 generates unit pseudonormal C8's

       C1=C8_NORMAL_01(SEED)
     ---------------------

      1.679040,   -0.472769
     -0.566060,   -0.231124
      1.212934,    0.535037
      1.269381,    1.049543
     -1.666087,   -1.865228
     -2.242464,    0.735809
      0.039675,   -1.350736
      0.673068,    0.007775
     -0.275127,    0.374940
      2.164005,    0.185600

C8_ONE_TEST
  C8_ONE returns one as a C8.

  C1 = C8_ONE ( ) =   ( 1, 0 )
  C2 = C1 + C1 =   ( 2, 0 )

C8_PRINT_TEST
  C8_PRINT prints a C8.

  Zero:  ( 0, 0 )
  One:  ( 1, 0 )
  Pi:  ( 3.14159, 0 )
  i:  ( 0, 1 )
  1+2i:  ( 1, 2 )
 -12.34 + 56.78i:  ( -12.34, 56.78 )
  1E-3 + 2E-6i:  ( 0.001, 2e-06 )
  3E8 - 4.5E9i:  ( 3e+08, -4.5e+09 )

C8_REAL_TEST
  C8_REAL computes the real part of a C8.

       C1=C8_UNIFORM_01         R2=C8_REAL(C1)    R3=CREAL(C1)
     ---------------------     ---------------   ---------------

      0.449860,   -0.126667        0.449860        0.449860
     -0.843197,   -0.344280       -0.843197       -0.843197
      0.589627,    0.260090        0.589627        0.589627
      0.391140,    0.323400        0.391140        0.391140
     -0.139466,   -0.156136       -0.139466       -0.139466
     -0.236066,    0.077459       -0.236066       -0.236066
      0.018599,   -0.633214        0.018599        0.018599
      0.892850,    0.010314        0.892850        0.892850
     -0.560465,    0.763795       -0.560465       -0.560465
      0.306357,    0.026275        0.306357        0.306357

C8_SIN_TEST
  C8_SIN computes the sine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_SIN(C1)            C3=C8_ASIN(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.438332,   -0.114370      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.791469,   -0.233524      3.984789,    0.344280
      0.589627,    0.260090      0.574965,    0.218619      2.551966,   -0.260090
      0.391140,    0.323400      0.401353,    0.304214      2.750453,   -0.323400
     -0.139466,   -0.156136     -0.140712,   -0.155249      3.281058,    0.156136
     -0.236066,    0.077459     -0.234582,    0.075386      6.047119,    0.077459
      0.018599,   -0.633214      0.022453,   -0.676269      0.018599,   -0.633214
      0.892850,    0.010314      0.778904,    0.006469      2.248743,   -0.010314
     -0.560465,    0.763795     -0.694324,    0.711703      5.722720,    0.763795
      0.306357,    0.026275      0.301691,    0.025055      2.835236,   -0.026275

C8_SINH_TEST
  C8_SINH computes the hyperbolic sine of a C8;

       C1=C8_UNIFORM_01          C2 = C8_SINH(C1)      C3 = C8_ASINH(C2)
     ---------------------     ---------------------  --------------------

      0.449860,   -0.126667      0.461460,   -0.139329     -0.449860,   -3.014925
     -0.843197,   -0.344280     -0.891170,   -0.464783     -0.843197,   -0.344280
      0.589627,    0.260090      0.603391,    0.303182      0.589627,   -6.023095
      0.391140,    0.323400      0.380392,    0.342413      0.391140,   -5.959785
     -0.139466,   -0.156136     -0.138216,   -0.157017     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.237551,    0.079548      0.236066,   -3.219052
      0.018599,   -0.633214      0.014994,   -0.591841     -0.018599,   -2.508378
      0.892850,    0.010314      1.016242,    0.014705      0.892850,   -6.272872
     -0.560465,    0.763795     -0.426304,    0.803175      0.560465,   -3.905388
      0.306357,    0.026275      0.311064,    0.027515      0.306357,   -6.256910

C8_SQRT_TEST
  C8_SQRT computes C2 = sqrt ( C1 ).
  Check by C3 = C2 * C2.

        C1=C8_UNIFORM_01          C2=C8_SQRT(C1)            C3=C2*C2
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.677205,    0.093522      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.183817,    0.936475     -0.843197,   -0.344280
      0.589627,    0.260090      0.785516,    0.165554      0.589627,    0.260090
      0.391140,    0.323400      0.670321,    0.241228      0.391140,    0.323400
     -0.139466,   -0.156136     -0.186933,    0.417624     -0.139466,   -0.156136
     -0.236066,    0.077459      0.078687,    0.492197     -0.236066,    0.077459
      0.018599,   -0.633214     -0.571002,    0.554476      0.018599,   -0.633214
      0.892850,    0.010314      0.944923,    0.005457      0.892850,    0.010314
     -0.560465,    0.763795      0.439831,    0.868283     -0.560465,    0.763795
      0.306357,    0.026275      0.554003,    0.023714      0.306357,    0.026275

C8_SUB_TEST
  C8_SUB computes C3 = C1 - C2.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3 = C8_SUB(C1,C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667     -0.843197,   -0.344280      1.293056,    0.217613
      0.589627,    0.260090      0.391140,    0.323400      0.198487,   -0.063310
     -0.139466,   -0.156136     -0.236066,    0.077459      0.096601,   -0.233595
      0.018599,   -0.633214      0.892850,    0.010314     -0.874250,   -0.643528
     -0.560465,    0.763795      0.306357,    0.026275     -0.866822,    0.737520
      0.500804,   -0.779931      0.350471,    0.016555      0.150333,   -0.796486
      0.434989,   -0.266623     -0.200947,    0.270711      0.635936,   -0.537333
     -0.097460,    0.901881     -0.770245,   -0.314307      0.672785,    1.216188
     -0.889181,    0.265655     -0.779871,   -0.551160     -0.109310,    0.816815
      0.031360,   -0.433556      0.249089,    0.578743     -0.217729,   -1.012299

C8_TAN_TEST
  C8_TAN computes the tangent of a C8;

       C1=C8_UNIFORM_01          C2 = C8_TAN(C1)           C3 = C8_ATAN(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.473464,   -0.154800     -2.691733,   -0.126667
     -0.843197,   -0.344280     -0.878091,   -0.657931     -0.843197,   -0.344280
      0.589627,    0.260090      0.608112,    0.357871     -2.551966,    0.260090
      0.391140,    0.323400      0.366014,    0.359758     -2.750453,    0.323400
     -0.139466,   -0.156136     -0.136945,   -0.157856     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.239031,    0.081750     -0.236066,    0.077459
      0.018599,   -0.633214      0.012761,   -0.560395     -3.122993,   -0.633214
      0.892850,    0.010314      1.241482,    0.026213     -2.248743,    0.010314
     -0.560465,    0.763795     -0.316310,    0.771013     -0.560465,    0.763795
      0.306357,    0.026275      0.316075,    0.028896     -2.835236,    0.026275

C8_TANH_TEST
  C8_TANH computes the hyperbolic tangent of a C8;

       C1=C8_UNIFORM_01         C2 = C8_TANH(C1)            C3 = C8_ATANH(C2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.427391,   -0.104392      0.449860,    3.014925
     -0.843197,   -0.344280     -0.731440,   -0.178253     -0.843197,    2.797313
      0.589627,    0.260090      0.556088,    0.187741      0.589627,    0.260090
      0.391140,    0.323400      0.407819,    0.284273      0.391140,    0.323400
     -0.139466,   -0.156136     -0.141935,   -0.154321     -0.139466,    2.985457
     -0.236066,    0.077459     -0.233098,    0.073421     -0.236066,    0.077459
      0.018599,   -0.633214      0.028612,   -0.733659      0.018599,    2.508378
      0.892850,    0.010314      0.712836,    0.005073      0.892850,    0.010314
     -0.560465,    0.763795     -0.787838,    0.574165     -0.560465,    0.763795
      0.306357,    0.026275      0.297306,    0.023960      0.306357,    0.026275

C8_TO_CARTESIAN_TEST
  C8_TO_CARTESIAN computes C8 -> ( X, Y ).

        C1=C8_UNIFORM_01    (X2,Y2)=C8_TO_CARTESIAN(C1)     C3=CARTESIAN_TO_C8(X2,Y2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.449860,   -0.126667      0.449860,   -0.126667
     -0.843197,   -0.344280     -0.843197,   -0.344280     -0.843197,   -0.344280
      0.589627,    0.260090      0.589627,    0.260090      0.589627,    0.260090
      0.391140,    0.323400      0.391140,    0.323400      0.391140,    0.323400
     -0.139466,   -0.156136     -0.139466,   -0.156136     -0.139466,   -0.156136
     -0.236066,    0.077459     -0.236066,    0.077459     -0.236066,    0.077459
      0.018599,   -0.633214      0.018599,   -0.633214      0.018599,   -0.633214
      0.892850,    0.010314      0.892850,    0.010314      0.892850,    0.010314
     -0.560465,    0.763795     -0.560465,    0.763795     -0.560465,    0.763795
      0.306357,    0.026275      0.306357,    0.026275      0.306357,    0.026275

C8_TO_POLAR_TEST
  C8_TO_POLAR computes C8 -> ( R, T ).

        C1=C8_UNIFORM_01     (X2,Y2)=C8_TO_POLAR(C1)     C3=POLAR_TO_C8(X2,Y2)
     ---------------------     ---------------------     ---------------------

      0.449860,   -0.126667      0.467352,    6.008721      0.449860,   -0.126667
     -0.843197,   -0.344280      0.910774,    3.529237     -0.843197,   -0.344280
      0.589627,    0.260090      0.644443,    0.415436      0.589627,    0.260090
      0.391140,    0.323400      0.507521,    0.690879      0.391140,    0.323400
     -0.139466,   -0.156136      0.209354,    3.983324     -0.139466,   -0.156136
     -0.236066,    0.077459      0.248450,    2.824537     -0.236066,    0.077459
      0.018599,   -0.633214      0.633487,    4.741753      0.018599,   -0.633214
      0.892850,    0.010314      0.892909,    0.011551      0.892850,    0.010314
     -0.560465,    0.763795      0.947367,    2.203842     -0.560465,    0.763795
      0.306357,    0.026275      0.307481,    0.085557      0.306357,    0.026275

C8_UNIFORM_01_TEST
  C8_UNIFORM_01 returns a uniformly random "unit" C8

       C1=C8_UNIFORM_01(SEED)
     ---------------------

      0.449860,   -0.126667
     -0.843197,   -0.344280
      0.589627,    0.260090
      0.391140,    0.323400
     -0.139466,   -0.156136
     -0.236066,    0.077459
      0.018599,   -0.633214
      0.892850,    0.010314
     -0.560465,    0.763795
      0.306357,    0.026275

C8_ZERO_TEST
  C8_ZERO returns zero as a C8.

  C1 = C8_ZERO ( ) =   ( 0, 0 )

C8MAT_IDENTITY_NEW_TEST
  C8MAT_IDENTITY_NEW sets a complex matrix to the identity.

  The Identity matrix:

  Col:                    1                   2                   3                   4
  Row
  ---
         1         0         0         0         0         0         0         0
         0         0         1         0         0         0         0         0
         0         0         0         0         1         0         0         0
         0         0         0         0         0         0         1         0

C8MAT_INDICATOR_NEW_TEST
  C8MAT_INDICATOR_NEW sets a complex matrix to the indicator matrix.

  The Indicator matrix:

  Col:                    1                   2                   3
  Row
  ---
         1         1         1         2         1         3
         2         1         2         2         2         3
         3         1         3         2         3         3
         4         1         4         2         4         3
         5         1         5         2         5         3

C8MAT_NORM_FRO_TEST
  C8MAT_NORM_FRO computes the Frobenius norm of a C8MAT.

  The Indicator matrix:

  Col:                    1                   2                   3                   4
  Row
  ---
         1         1         1         2         1         3         1         4
         2         1         2         2         2         3         2         4
         3         1         3         2         3         3         3         4
         4         1         4         2         4         3         4         4
         5         1         5         2         5         3         5         4

  The Frobenius norm = 19.2354

C8MAT_NORM_L1_TEST
  C8MAT_NORM_L1 computes the L1 norm of a C8MAT.

  The Indicator matrix:

  Col:                    1                   2                   3                   4
  Row
  ---
         1         1         1         2         1         3         1         4
         2         1         2         2         2         3         2         4
         3         1         3         2         3         3         3         4
         4         1         4         2         4         3         4         4
         5         1         5         2         5         3         5         4

  The L1 norm = 25.6552

C8MAT_NORM_LI_TEST
  C8MAT_NORM_LI computes the Loo norm of a C8MAT.

  The Indicator matrix:

  Col:                    1                   2                   3                   4
  Row
  ---
         1         1         1         2         1         3         1         4
         2         1         2         2         2         3         2         4
         3         1         3         2         3         3         3         4
         4         1         4         2         4         3         4         4
         5         1         5         2         5         3         5         4

  The Loo norm = 22.7183

C8MAT_UNIFORM_01_NEW_TEST
  C8MAT_UNIFORM_01_NEW computes a random complex matrix.

  The matrix:

  Col:                    1                   2                   3                   4
  Row
  ---
   0.44986  -0.126667  -0.236066  0.0774593  0.500804  -0.779931  -0.770245  -0.314307
  -0.843197  -0.34428  0.0185993  -0.633214  0.350471  0.0165551  -0.889181  0.265655
  0.589627   0.26009   0.89285  0.0103136  0.434989  -0.266623  -0.779871  -0.55116
   0.39114    0.3234  -0.560465  0.763795  -0.200947  0.270711  0.0313602  -0.433556
  -0.139466  -0.156136  0.306357  0.0262752  -0.0974599  0.901881  0.249089  0.578743

C8VEC_INDICATOR_NEW_TEST
  C8VEC_INDICATOR_NEW sets A = (1-1i,2-2i,...,N-Ni)

  The indicator vector:

         0:       1.000000       -1.000000
         1:       2.000000       -2.000000
         2:       3.000000       -3.000000
         3:       4.000000       -4.000000
         4:       5.000000       -5.000000
         5:       6.000000       -6.000000
         6:       7.000000       -7.000000
         7:       8.000000       -8.000000
         8:       9.000000       -9.000000
         9:      10.000000      -10.000000

C8VEC_NINT_TEST
  C8VEC_NINT rounds a complex vector.

  The initial vector:

         0:       2.629300        0.716242
         1:      -3.183143       -4.250990
         2:       2.167865        3.069333
         3:       0.985498        2.790419
         4:      -0.228922       -1.199075

  The rounded vector:

         0:       3.000000        1.000000
         1:      -3.000000       -4.000000
         2:       2.000000        3.000000
         3:       1.000000        3.000000
         4:       0.000000       -1.000000

C8VEC_NORM_L1_TEST
  C8VEC_NORM_L1 returns the L1 norm of a C8VEC.

  The initial vector:

         0:       1.000000       -1.000000
         1:       2.000000       -2.000000
         2:       3.000000       -3.000000
         3:       4.000000       -4.000000
         4:       5.000000       -5.000000

  L1 norm is 21.2132

C8VEC_NORM_L2_TEST
  C8VEC_NORM_L2 returns the L2 norm of a C8VEC.

  The initial vector:

         0:       1.000000       -1.000000
         1:       2.000000       -2.000000
         2:       3.000000       -3.000000
         3:       4.000000       -4.000000
         4:       5.000000       -5.000000

  L2 norm is 10.4881

C8VEC_NORM_LI_TEST
  C8VEC_NORM_LI returns the Loo norm of a C8VEC.

  The initial vector:

         0:       1.000000       -1.000000
         1:       2.000000       -2.000000
         2:       3.000000       -3.000000
         3:       4.000000       -4.000000
         4:       5.000000       -5.000000

  Loo norm is 7.07107

C8VEC_PRINT_TEST
  C8VEC_PRINT prints a C8VEC.

  The C8VEC:

         0:       1.000000       -1.000000
         1:       2.000000       -2.000000
         2:       3.000000       -3.000000
         3:       4.000000       -4.000000
         4:       5.000000       -5.000000

C8VEC_PRINT_PART_TEST
  C8VEC_PRINT_PART prints part of a C8VEC.

  Part of the C8VEC:

         0: (      1.000000,       -1.000000)
         1: (      2.000000,       -2.000000)
         2: (      3.000000,       -3.000000)
         3: (      4.000000,       -4.000000)
         4: (      5.000000,       -5.000000)
         5: (      6.000000,       -6.000000)
         6: (      7.000000,       -7.000000)
         7: (      8.000000,       -8.000000)
  ........   ..............   ..............
        99: (    100.000000,     -100.000000)

C8VEC_SORT_A_L1_TEST
  C8VEC_SORT_A_L1 sorts a C8VEC by the L1 norm.

  The unsorted vector:

         0:       0.449860       -0.126667
         1:      -0.843197       -0.344280
         2:       0.589627        0.260090
         3:       0.391140        0.323400
         4:      -0.139466       -0.156136
         5:      -0.236066        0.077459
         6:       0.018599       -0.633214
         7:       0.892850        0.010314
         8:      -0.560465        0.763795
         9:       0.306357        0.026275

   I             A(I)                   L1(A(I))

   0       -0.139466,     -0.156136        0.295601
   1       -0.236066,     0.0774593        0.313526
   2        0.306357,     0.0262752        0.332632
   3         0.44986,     -0.126667        0.576527
   4       0.0185993,     -0.633214        0.651814
   5         0.39114,        0.3234         0.71454
   6        0.589627,       0.26009        0.849717
   7         0.89285,     0.0103136        0.903163
   8       -0.843197,      -0.34428         1.18748
   9       -0.560465,      0.763795         1.32426

C8VEC_SORT_A_L2_TEST
  C8VEC_SORT_A_L2 sorts a C8VEC by the L2 norm.

  The unsorted vector:

         0:       0.449860       -0.126667
         1:      -0.843197       -0.344280
         2:       0.589627        0.260090
         3:       0.391140        0.323400
         4:      -0.139466       -0.156136
         5:      -0.236066        0.077459
         6:       0.018599       -0.633214
         7:       0.892850        0.010314
         8:      -0.560465        0.763795
         9:       0.306357        0.026275

   I             A(I)                   L2(A(I))

   0       -0.139466,     -0.156136        0.209354
   1       -0.236066,     0.0774593         0.24845
   2        0.306357,     0.0262752        0.307481
   3         0.44986,     -0.126667        0.467352
   4         0.39114,        0.3234        0.507521
   5       0.0185993,     -0.633214        0.633487
   6        0.589627,       0.26009        0.644443
   7         0.89285,     0.0103136        0.892909
   8       -0.843197,      -0.34428        0.910774
   9       -0.560465,      0.763795        0.947367

C8VEC_SORT_A_LI_TEST
  C8VEC_SORT_A_LI sorts a C8VEC by the Loo norm.

  The unsorted vector:

         0:       0.449860       -0.126667
         1:      -0.843197       -0.344280
         2:       0.589627        0.260090
         3:       0.391140        0.323400
         4:      -0.139466       -0.156136
         5:      -0.236066        0.077459
         6:       0.018599       -0.633214
         7:       0.892850        0.010314
         8:      -0.560465        0.763795
         9:       0.306357        0.026275

   I             A(I)                   Loo(A(I))

   0       -0.139466,     -0.156136        0.156136
   1       -0.236066,     0.0774593        0.236066
   2        0.306357,     0.0262752        0.306357
   3         0.39114,        0.3234         0.39114
   4         0.44986,     -0.126667         0.44986
   5        0.589627,       0.26009        0.589627
   6       0.0185993,     -0.633214        0.633214
   7       -0.560465,      0.763795        0.763795
   8       -0.843197,      -0.34428        0.843197
   9         0.89285,     0.0103136         0.89285

C8VEC_SPIRAL_NEW_TEST
  C8VEC_SPIRAL_NEW returns N points on a spiral
  which includes M complete turns.

  The spiral points:

         0:       5.000000        0.000000
         1:       4.185789        2.416667
         2:       2.333333        4.041452
         3:       0.000000        4.500000
         4:      -2.166667        3.752777
         5:      -3.608439        2.083333
         6:      -4.000000        0.000000
         7:      -3.319764       -1.916667
         8:      -1.833333       -3.175426
         9:      -0.000000       -3.500000
        10:       1.666667       -2.886751
        11:       2.742414       -1.583333
        12:       3.000000       -0.000000

C8VEC_UNIFORM_01_NEW_TEST
  C8VEC_UNIFORM_01_NEW computes a random complex vector.

  The random C8VEC:

         0:       0.449860       -0.126667
         1:      -0.843197       -0.344280
         2:       0.589627        0.260090
         3:       0.391140        0.323400
         4:      -0.139466       -0.156136

C8VEC_UNITY_NEW_TEST
  C8VEC_UNITY_NEW sets A to the N roots of unity

  The N roots of unity:

         0:       1.000000        0.000000
         1:       0.866025        0.500000
         2:       0.500000        0.866025
         3:       0.000000        1.000000
         4:      -0.500000        0.866025
         5:      -0.866025        0.500000
         6:      -1.000000        0.000000
         7:      -0.866025       -0.500000
         8:      -0.500000       -0.866025
         9:      -0.000000       -1.000000
        10:       0.500000       -0.866025
        11:       0.866025       -0.500000

CARTESIAN_TO_C8_TEST
  CARTESIAN_TO_C8 computes ( X, Y ) -> C8.

        (X1,Y1)=R8_UNIFORM_01    C2=CARTESIAN_TO_C8(X1,Y1)(X3,Y3)=C8_TO_CARTESIAN(C2)     
     ---------------------     ---------------------     ---------------------

      0.218418,    0.956318      0.218418,    0.956318      0.218418,    0.956318
      0.829509,    0.561695      0.829509,    0.561695      0.829509,    0.561695
      0.415307,    0.066119      0.415307,    0.066119      0.415307,    0.066119
      0.257578,    0.109957      0.257578,    0.109957      0.257578,    0.109957
      0.043829,    0.633966      0.043829,    0.633966      0.043829,    0.633966
      0.061727,    0.449539      0.061727,    0.449539      0.061727,    0.449539
      0.401306,    0.754673      0.401306,    0.754673      0.401306,    0.754673
      0.797287,    0.001838      0.797287,    0.001838      0.797287,    0.001838
      0.897504,    0.350752      0.897504,    0.350752      0.897504,    0.350752
      0.094545,    0.013617      0.094545,    0.013617      0.094545,    0.013617

POLAR_TO_C8_TEST
  POLAR_TO_C8 computes C8 -> ( R, T ).

        R1,T1=C8_UNIFORM_01     C2=POLAR_TO_C8(X1,Y1)     (X3,Y3)=C8_TO_POLAR(C2)     
     ---------------------     ---------------------     ---------------------

      0.218418,    6.008721      0.210243,   -0.059198      0.218418,    6.008721
      0.829509,    3.529237     -0.767962,   -0.313561      0.829509,    3.529237
      0.415307,    0.415436      0.379981,    0.167613      0.415307,    0.415436
      0.257578,    0.690879      0.198512,    0.164132      0.257578,    0.690879
      0.043829,    3.983324     -0.029198,   -0.032688      0.043829,    3.983324
      0.061727,    2.824537     -0.058651,    0.019245      0.061727,    2.824537
      0.401306,    4.741753      0.011782,   -0.401133      0.401306,    4.741753
      0.797287,    0.011551      0.797234,    0.009209      0.797287,    0.011551
      0.897504,    2.203842     -0.530966,    0.723594      0.897504,    2.203842
      0.094545,    0.085557      0.094199,    0.008079      0.094545,    0.085557

R8_ATAN_TEST
  R8_ATAN computes the arc-tangent given Y and X;
  ATAN2 is the system version of this routine.

          X              Y          ATAN2(Y,X)    R8_ATAN(Y,X)

        1.000000        0.000000        0.000000        0.000000
        1.000000        1.000000        0.785398        0.785398
        0.000000        1.000000        1.570796        1.570796
       -1.000000        1.000000        2.356194        2.356194
       -1.000000        0.000000        3.141593        3.141593
       -1.000000       -1.000000       -2.356194        3.926991
        0.000000       -1.000000       -1.570796        4.712389
        1.000000       -1.000000       -0.785398        5.497787

R8_UNIFORM_01_TEST
  R8_UNIFORM_01 samples a uniform random distribution in [0,1].
  distributed random numbers.
  Using initial random number seed = 123456789

  First few values:

       0        0.218418
       1        0.956318
       2        0.829509
       3        0.561695
       4        0.415307
       5        0.066119
       6        0.257578
       7        0.109957
       8        0.043829
       9        0.633966

  Number of samples was 1000
  Minimum value was 0.001838
  Maximum value was 0.997908
  Average value was 0.503040
  Variance was      0.082250

R8POLY2_ROOT_TEST
  R8POLY2_ROOT finds quadratic equation roots.

         A         B         C     R1         R2

        -2       -24  (       4,       0)  (-3,0)
       -20       100  (      10,       0)  (10,0)
        -2        10  (       1,       3)  (1,-3)

R8POLY3_ROOT_TEST
  R8POLY3_ROOT finds roots of cubic equations.


  Polynomial coefficients A, B, C, D:

  A = 1
  B = -6
  C = 11
  D = -6

  Roots:

  (1,0)
  (3,0)
  (2,0)

  Polynomial coefficients A, B, C, D:

  A = 9
  B = -36
  C = 54
  D = -27

  Roots:

  (1,0)
  (1.5,0.866025)
  (1.5,-0.866025)

  Polynomial coefficients A, B, C, D:

  A = 1
  B = -5
  C = 8
  D = -4

  Roots:

  (1,0)
  (2,0)
  (2,-0)

  Polynomial coefficients A, B, C, D:

  A = 1
  B = -8
  C = 25
  D = -26

  Roots:

  (2,0)
  (3,2)
  (3,-2)

R8POLY4_ROOT_TEST
  R8POLY4_ROOT finds roots of quartic equations.


  A = 1
  B = -10
  C = 35
  D = -50
  E = 24

  Roots:

  (4,0)
  (1,0)
  (3,0)
  (2,-0)

  A = 1
  B = -5
  C = 1
  D = 21
  E = -18

  Roots:

  (3,0)
  (3,0)
  (1,0)
  (-2,-0)

  A = 1
  B = -22
  C = 141
  D = -220
  E = 100

  Roots:

  (10,0)
  (10,0)
  (1,0)
  (1,-0)

  A = 1
  B = -16
  C = 72
  D = -128
  E = 80

  Roots:

  (10,0)
  (2,0)
  (2,0)
  (2,-0)

  A = 1
  B = -20
  C = 150
  D = -500
  E = 625

  Roots:

  (5,0)
  (5,0)
  (5,0)
  (5,-0)

  A = 1
  B = 2
  C = 1
  D = 8
  E = -12

  Roots:

  (-4.40688e-17,2)
  (-2.88998e-16,-2)
  (1,0)
  (-3,-0)

  A = 1
  B = 0
  C = 13
  D = 0
  E = 36

  Roots:

  (-5.93459e-16,3)
  (8.99621e-16,2)
  (-8.99621e-16,-2)
  (5.93459e-16,-3)

C8LIB_PRB
  Normal end of execution.

19 January 2020 09:01:38 AM
